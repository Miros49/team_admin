import asyncio
import time

from aiogram import Dispatcher, F, Bot, Router
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from config_data import Config, load_config
from database import DataBase
from keyboards import UserKeyboards
from lexicon import *
from state import UserState

from aiocryptopay import AioCryptoPay, Networks

config: Config = load_config('.env')

DATABASE_URL = f"postgresql+asyncpg://{config.db.db_user}:{config.db.db_password}@{config.db.db_host}/{config.db.database}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router: Router = Router()
config: Config = load_config('.env')
db = DataBase(DATABASE_URL)
storage = MemoryStorage()
bot: Bot = Bot(token=config.tg_bot.token)
dp: Dispatcher = Dispatcher(storage=storage)
kb = UserKeyboards()


@router.message(F.text == buttons['profile'])
async def profile(message: Message):
    await message.answer(LEXICON_RU['profile'].format(
        user_id=message.from_user.id,
        lolz='',
        tutor='–ù–µ—Ç',
        displayed_nickname='',
        status='',
        nickname='',
        current_balance='',
        total_turnover='',
        percent='',
        proxy='',
        numbers='',
        erc='',
        btc='',
        trc='',
        tron=''
    ), reply_markup=kb.profile_kb())


@router.callback_query(F.data == callbacks['üÜô –ü–æ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã'])
async def profile_menu(callback: CallbackQuery):
    await callback.message.answer(callback.data)


@router.callback_query(F.data == callbacks['üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'])
async def profile_menu(callback: CallbackQuery):
    await callback.message.answer(callback.data)


@router.callback_query(F.data == callbacks['üëõ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª–µ–∫'])
async def profile_menu(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(callback.data)


@router.callback_query(F.data == callbacks['üí∏ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É'])
async def profile_menu(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(callback.data)


@router.callback_query(F.data == callbacks['‚≠êÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º'])
async def profile_menu(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(callback.data)


@router.callback_query(F.data == callbacks['ü´Ç –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'])
async def profile_menu(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(callback.data)


@router.message(F.text == buttons['options'])
async def options_menu(message: Message):
    await message.answer('üîß–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã', reply_markup=kb.options)


@router.callback_query(F.data == callbacks['üîó –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏'])
async def get_proxy(callback: CallbackQuery):
    # TODO: proxy logic
    await callback.message.answer('–ø—Ä–æ–∫—Å–∏')


@router.callback_query(F.data == callbacks['üì± –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä'])
async def get_number(callback: CallbackQuery):
    # TODO: number logic
    await callback.message.answer('–Ω–æ–º–µ—Ä')


@router.callback_query(F.data == callbacks['üìü –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã'])
async def generators(callback: CallbackQuery):
    # TODO: –ø–æ–Ω—è—Ç—å, —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ
    await callback.message.answer('?')


@router.message(F.text == buttons['current_domain'])
async def domain_menu(message: Message):
    await message.answer(LEXICON_RU['current_domain'], parse_mode='HTML')


@router.message(F.text == buttons['promo'])
async def promo_menu(message: Message):
    await message.answer(LEXICON_RU['your_promo'], reply_markup=kb.promo)


@router.callback_query(F.data == callbacks['üî∑ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'])
async def get_promo(callback: CallbackQuery):
    await callback.message.answer('–ø—Ä–æ–º–∏–∫')  # TODO: —á—Ç–æ —ç—Ç–æ


@router.callback_query(F.data == callbacks['üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤'])
async def promo_statistics(callback: CallbackQuery):
    await callback.message.answer('—Å—Ç–∞—Ç–∞')


@router.callback_query(F.data == callbacks['‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'])
async def add_promo(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–¥–æ–±–∞–≤–ª—è–π (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)')
    # await state.set_state()


@router.message(F.text == buttons['information'])
async def information(message: Message):
    await message.answer(LEXICON_RU['information'])


@router.message(F.text == buttons['tutors'])
async def tutors(message: Message):
    await message.answer(LEXICON_RU['tutors'], reply_markup=UserKeyboards.tutors)


@router.callback_query(F.data == callbacks['üìù –ó–∞—è–≤–∫–∞ –≤ —Ñ–∏–ª–∏–∞–ª'])
async def application_to_branch(callback: CallbackQuery):
    await callback.message.answer(LEXICON_RU['dev'])

# @router.callback_query()
# async def temp(callback: CallbackQuery):
#     await callback.message.answer(callback.data)
#
#
# @router.message()
# async def calosbornik(message: Message):
#     if await db.user_exists(message.from_user.id):
#         await message.answer('yes')
#     else:
#         await db.set_user(message.from_user.id)
#         await message.answer('added')
